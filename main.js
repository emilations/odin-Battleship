(()=>{"use strict";let e={2:"Patrol Boat",3:"Submarine",3:"Destroyer",4:"Battleship",5:"Carrier"};function t(){let t=1,r=[],i=Array(10).fill("0").map((()=>Array(10).fill("0")));return{shipList:r,getPrivateGrid:function(){return JSON.parse(JSON.stringify(i))},getPublicGrid:function(){let e=i.map((e=>e.map((e=>"H"==e[0]||"M"==e[0]?e[0]:"0"))));return JSON.parse(JSON.stringify(e))},placeShip:function(a,n){if("x"==a.dir&&a.x+n>10)throw new Error("Outside of grid");if("y"==a.dir&&a.y+n>10)throw new Error("Outside of grid");if("x"==a.dir){for(let e=0;e<n;e++)if("S"==i[a.x+e][a.y][0])throw new Error("Interference")}else if("y"==a.dir)for(let e=0;e<n;e++)if("S"==i[a.x][a.y+e][0])throw new Error("Interference");let l=`S${t}`;t++;let o=function(t,r){if(!t||t>5||t<=1)throw new Error("Length must be between 2 and 5");let i=e[t],a=Array(t).fill(!0),n=Array();return{shipId:r,type:i,shipLength:t,getFuselage:function(){return[...a]},setCoor:function(e){n.push({x:e.x,y:e.y})},getCoor:function(){return[...n]},hit:function(e){let t=!1;return n.forEach(((r,i)=>{JSON.stringify(r)==JSON.stringify(e)&&(a[i]=!1,t=!0)})),t},isSunk:function(){return!!a.every((e=>!e))}}}(n,l);if(r.push(o),"x"==a.dir)for(let e=0;e<n;e++)i[a.x+e][a.y]=l,o.setCoor({x:a.x+e,y:a.y});else if("y"==a.dir)for(let e=0;e<n;e++)i[a.x][a.y+e]=l,o.setCoor({x:a.x,y:a.y+e});return o},attack:function(e){if(e.x<0||e.x>9||e.y<0||e.y>9)throw new Error("Outside of grid");return"S"==i[e.x][e.y][0]?(i[e.x][e.y]=i[e.x][e.y].replace("S","H"),r.find(((t,r,i)=>t.hit(e))),"Hit"):"H"==i[e.x][e.y][0]||"M"==i[e.x][e.y][0]?"Already hit":(i[e.x][e.y]="M","Miss")},isAllHit:function(){return r.every((e=>e.isSunk()))}}}let r=function(e){if("Human"==e)return{type:"Human",score:0,gameboard:t(),placeShip:function(e,t){return this.gameboard.placeShip(e,t)},receiveHit:function(e){return this.gameboard.attack(e)}};if("Computer"==e){let e=t();return{type:"Computer",score:0,gameboard:e,placeShip:function(t,r){if(t)return this.gameboard.placeShip(t,r);let i=[5,4,3,3,2],a=0;do{let t=Math.floor(10*Math.random()),r=Math.floor(10*Math.random()),n=0==Math.floor(2*Math.random())?"x":"y";try{e.placeShip({x:t,y:r,dir:n},i[a])}catch(e){a--}a++}while(a<5)},receiveHit:function(e){return this.gameboard.attack(e)},attack:function(){let e=JSON.parse(JSON.stringify(i.gameboard.getPublicGrid()));if(i.gameboard.getPublicGrid().every(((t,r)=>t.every(((t,a)=>"H"!=t||[{x:r+1,y:a},{x:r-1,y:a},{x:r,y:a+1},{x:r,y:a-1}].every((t=>!(t.x>=0&&t.x<10&&t.y>=0&&t.y<10&&"0"==e[t.x][t.y]&&(i.receiveHit(t),n.round(),1))))))))){let e=!1;do{let t={x:Math.floor(10*Math.random()),y:Math.floor(10*Math.random())},r=/Already hit/;try{let a=i.receiveHit(t);e=!!r.test(a)}catch(t){e=!0}}while(e);n.round()}}}}throw new Error("Unsupported type")},i=r("Human"),a=r("Computer"),n=function(){let e="Human",t=function(){l.configure("placeShip"),l.cacheDOM(),l.rotateButton("on"),l.startHighlightCell("placeShip"),l.registerPlaceShipCell()},n=function(){if(c())return l.refresh("populate"),void s();"Human"==e?e="Human"==e?"Computer":"Human":"Computer"==e&&(e="Human"==e?"Computer":"Human",o(""),a.attack(),l.refresh("populate"))},c=function(){return!(!i.gameboard.isAllHit()&&!a.gameboard.isAllHit())},s=function(){e="Human"==e?"Computer":"Human",l.refresh("reset"),o(`${e} Won`)};return{initiateGame:function(){a=r("Computer"),i=r("Human"),t()},startGame:function(){l.configure("gameOn"),l.refresh("reset"),l.refresh("populate"),o("Place your hits on enemy waters"),a.placeShip(),l.cacheDOM(),l.attackListenerCell(),l.startHighlightCell("gameOn"),n()},endGame:s,placeShip:t,getGrid:function(e){return"human"==e?JSON.parse(JSON.stringify(i.gameboard.getPrivateGrid())):"computer"==e?JSON.parse(JSON.stringify(a.gameboard.getPublicGrid())):void 0},round:n}}(),l=function(){let e,t,r={y:0,x:0,dir:"x"},c=["Place your carrier captain","Place your battleship captain","Place your destroyer captain","Place your submarine captain","Place your patrol boat captain"],s=[5,4,3,3,2],d=0,u=function(e){r.x=parseInt(e.target.id[12]),r.y=parseInt(e.target.id[6])};function h(){a.receiveHit({x:r.x,y:r.y}),f("populate"),l.refresh("removeListener"),n.round()}let f=function(n){if("reset"==n){let e=document.querySelector(".grid-left > .grid-layout"),t=e.cloneNode(!0);e.parentNode.replaceChild(t,e);let r=document.querySelector(".grid-right > .grid-layout"),i=r.cloneNode(!0);r.parentNode.replaceChild(i,r)}else if("populate"==n)i.gameboard.getPrivateGrid().forEach(((t,r)=>{t.forEach(((t,i)=>{if("S"==t[0]){let t=parseInt(r)+10*parseInt(i);e[t].classList.add("cell-ship-present")}else if("H"==t[0]){let t=parseInt(r)+10*parseInt(i);e[t].classList.add("cell-ship-hit")}else if("M"==t[0]){let t=parseInt(r)+10*parseInt(i);e[t].classList.add("cell-ship-missed")}}))})),a.gameboard.getPublicGrid().forEach(((e,r)=>{e.forEach(((e,i)=>{let a=parseInt(r)+10*parseInt(i);"H"==e[0]?t[a].classList.add("cell-ship-hit"):"M"==e[0]&&t[a].classList.add("cell-ship-missed")}))}));else if("highlight"==n)e.forEach((e=>e.classList.remove("cell-hover","cell-hover-outBound","cell-ship-highlight-interference","cell-hover-attack"))),t.forEach((e=>e.classList.remove("cell-hover","cell-hover-outBound","cell-ship-highlight-interference","cell-hover-attack")));else if("removeListener"==n){let e=parseInt(r.x)+10*parseInt(r.y);t[e].removeEventListener("click",h)}},p=function(){r.dir="x"==r.dir?"y":"x",f("highlight")};return{cacheDOM:function(){e=document.querySelectorAll(".grid-left > .grid-layout > .cell-p1"),t=document.querySelectorAll(".grid-right > .grid-layout > .cell-p1")},configure:function(e){let t=document.querySelector(".grid-left"),r=document.querySelector(".grid-right");"placeShip"==e?(o("","add"),o(`${c[d]}`),t.classList.add("grid-middle"),r.classList.add("grid-hide")):"gameOn"==e&&(o("","del"),t.classList.remove("grid-middle"),r.classList.remove("grid-hide"))},startHighlightCell:function(a){if("placeShip"==a){function n(t){o(`${c[d]}`),f("highlight");let a=parseInt(r.x)+10*parseInt(r.y);if("x"==r.dir&&s[d]+parseInt(r.x)>10||"y"==r.dir&&s[d]+parseInt(r.y)>10)return void e[a].classList.add("cell-hover-outBound");let n=i.gameboard.getPrivateGrid();if("x"==r.dir)for(let t=0;t<s[d];t++)"S"==n[r.x+t][r.y][0]&&e[a+t].classList.add("cell-ship-highlight-interference");else if("y"==r.dir)for(let t=0;t<s[d];t++)"S"==n[r.x][r.y+t][0]&&e[a+10*t].classList.add("cell-ship-highlight-interference");if("x"==r.dir)for(let t=0;t<s[d];t++)e[a+t].classList.add("cell-hover");else if("y"==r.dir)for(let t=0;t<s[d];t++)e[a+10*t].classList.add("cell-hover")}e.forEach((e=>{e.addEventListener("mouseover",u),e.addEventListener("mouseover",n)}))}else if("gameOn"==a){function l(e){f("highlight");let i=parseInt(r.x)+10*parseInt(r.y);t[i].classList.add("cell-hover-attack")}t.forEach((e=>{e.addEventListener("mouseover",l)}))}},rotateButton:function(e){"on"==e&&document.querySelector(".message > button").addEventListener("click",p)},refresh:f,registerPlaceShipCell:function(){function t(e){let t=i.gameboard.getPrivateGrid();if("x"==r.dir){for(let e=0;e<s[d];e++)if("S"==t[r.x+e][r.y][0])return}else if("y"==r.dir)for(let e=0;e<s[d];e++)if("S"==t[r.x][r.y+e][0])return;o(`${c[d]}`),i.placeShip(r,s[d]),i.gameboard.getPrivateGrid(),d++,f("populate"),o(`${c[d]}`),d>=5&&n.startGame()}e.forEach((e=>{e.addEventListener("click",t)}))},attackListenerCell:function(){t.forEach((e=>{e.addEventListener("mouseover",u),e.addEventListener("click",h)}))}}}(),o=function(e,t){if(document.querySelector(".message > p").innerHTML=e,"add"==t){let e=document.createElement("button");e.textContent="Rotate Ship",document.querySelector(".message").append(e)}else if("del"==t){let e=document.querySelector(".message");e.removeChild(e.lastChild)}};n.initiateGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,